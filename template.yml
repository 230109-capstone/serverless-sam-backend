AWSTemplateFormatVersion: '2010-09-09'

Description: >-
  230109 Serverless Project-3
Transform:
- 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    Timeout: 20
    MemorySize: 128
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
    Auth:
      AddDefaultAuthorizerToCorsPreflight: false

Resources:

  TestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: test-function/
      Handler: index.handler
      Runtime: nodejs16.x
      Events:
        Test:
          Type: Api
          Properties:
            Path: /test
            Method: get
  TestFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TestFunction}'
      RetentionInDays: 30
  ApproveDenyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: approve-deny-function/
      Handler: index.handler
      Runtime: nodejs16.x
      Events:
        Test:
          Type: Api
          Properties:
            Path: /reimbursements/:id/status
            Method: patch
  ApproveDenyFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApproveDenyFunction}'
      RetentionInDays: 30
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register-function/
      Handler: register-handler.handler
      Runtime: nodejs16.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Events:
        Register:
          Type: Api
          Properties:
            Path: /users
            Method: post
  RegisterFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RegisterFunction}'
      RetentionInDays: 30
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login-function/
      Handler: index.handler
      Runtime: nodejs16.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          JWT_SIGNING_SECRET: psstthisisthesecret
      Events:
        Login:
          Type: Api
          Properties:
            Path: /login
            Method: post
  LoginFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoginFunction}'
      RetentionInDays: 30
  AddReimbursements:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: add-reimbursements-function/
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 60
      Events:
        AddReimbursements:
          Type: Api
          Properties:
            Path: /reimbursements
            Method: post
      Environment:
        Variables:
          REIMBURSEMENTS_TABLE_NAME: !Ref ReimbursementsTable
          RECEIPTS_BUCKET_NAME: !Ref ReceiptsBucket
          JWT_SIGNING_SECRET: psstthisisthesecret
      Policies:
        - Statement:
            Effect: Allow
            Action:
             - dynamodb:PutItem
            Resource: !GetAtt ReimbursementsTable.Arn
        - S3WritePolicy:
            BucketName: !Ref ReceiptsBucket
  AddReimbursementsLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AddReimbursements}'
      RetentionInDays: 30
  ViewReimbursementsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: view-reimbursements-function/
      Handler: index.handler
      Runtime: nodejs16.x
      Policies:
          - DynamoDBCrudPolicy:
              TableName: !Ref ReimbursementsTable
          - S3ReadPolicy:
              BucketName: !Ref ReceiptsBucket
      Environment:
          Variables:
            REIMBURSEMENTS_TABLE_NAME: !Ref ReimbursementsTable
            RECEIPTS_BUCKET_NAME: !Ref ReceiptsBucket
            JWT_SIGNING_SECRET: psstthisisthesecret
      Events:
        ViewReimbursements:
          Type: Api
          Properties:
            Path: /reimbursements
            Method: get
  ViewReimbursementsFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ViewReimbursementsFunction}'
      RetentionInDays: 30
  ReimbursementsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: submitter
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: submitterIndex
          KeySchema:
            - AttributeName: submitter
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - amount
              - description
              - status
            ProjectionType: INCLUDE
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  ReceiptsBucket:
    Type: AWS::S3::Bucket

Outputs:
  Endpoint:
    Description: "Endpoint for API Gateway"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"